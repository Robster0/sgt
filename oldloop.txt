            for(let i = 0; i<html.length; i++) {

                if(stack.length === 0 && mode !== 'write')
                newHtml += html[i]
                
                    
            

                //write the curr command
                if(mode === 'write')
                    statement += html[i]
                else if(stack.length !== 0) {
                    content += html[i]
                }
                    
    
                
                if(html[i] === '[' && (html[i + 1] === '$' || html[i + 1] === '/'))
                    mode = 'write'




                    
                if(html[i + 1] === ']') {

                    mode = 'check'

                    const s = stack[stack.length - 1]

                    if(statement[0] === '$') {

                        if(contentSeg[statement])
                            statement = statement + `-DUPLICATE-${Math.random().toString().substring(2, 5)}`
                        
                            

                        content += this.#addIndex(statement, content[content.length - 1], statement[0])
                        newHtml += this.#addIndex(statement, newHtml[newHtml.length - 1], statement[0])

                        stack.push(statement)

                        //check statement
                    }

                    if(s) contentSeg[s] = contentSeg[s] ? contentSeg[s] + content : content
                    
                    if(statement[0] === '/') {

                        //Statement command
                        const sc = statement.split(' ')[0].toLowerCase()
                        //Latest command
                        const lc = s.split(' ')[0].toLowerCase()

                        if(sc.substring(1, sc.length - 1) !== lc.substring(1, lc.length - 1)) throw new SyntaxError("invalid closing scope")
    
                        if(stack.length === 0) throw new SyntaxError("invalid syntax")

                        const executedStatement = this.#ExecuteStatement(contentSeg[s].substring(0, contentSeg[s].length - 1), s)

                        stack.pop()
                    } 



                    content = ''
                    statement = ''
                }   
            }
    
            if(stack.length) throw new SyntaxError("invalid syntax") 
    
           console.log(newHtml)
    
            const keys = Object.keys(contentSeg)
    
    
            for(let i = 0; i<keys.length; i++) {
                console.log(keys[i], ": ")
                console.log(contentSeg[keys[i]].substring(1, contentSeg[keys[i]].length - 1))
            }

            